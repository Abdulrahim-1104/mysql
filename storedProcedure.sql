CREATE DATABASE STORED_PROCEDURE;
USE STORED_PROCEDURE;

CREATE TABLE EMPLOYEE(
EMP_ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
EMP_NAME VARCHAR(10) NOT NULL,
SALARY INT
);
INSERT INTO EMPLOYEE VALUES (1,'RAM',1000);
INSERT INTO EMPLOYEE VALUES (2,'RAHUL',1000);
INSERT INTO EMPLOYEE VALUES (3,'RAMESH',1000);
INSERT INTO EMPLOYEE VALUES (5,'RAGU',1000);
INSERT INTO EMPLOYEE VALUES (4,'RAVI',1000);
INSERT INTO EMPLOYEE VALUES (6,'RAVANA',1000);
INSERT INTO EMPLOYEE VALUES (7,'RAVANI',2000);
INSERT INTO EMPLOYEE VALUES (8,'RAVI',2000);

SELECT * FROM EMPLOYEE;

-- CREATING STORED PROCUDURE -- 
DELIMITER $$
CREATE PROCEDURE SP()
BEGIN
	SELECT EMP_ID,EMP_NAME FROM EMPLOYEE;
END$$
DELIMITER ;
-- INVOKING PROCEDURE -- 
CALL SP();

-- DELETING PROCEDURE --
DROP PROCEDURE IF EXISTS SP;

-- DELCARING VARIABLE IN PROCEDURE -- 
DELIMITER $$
CREATE PROCEDURE SP()
BEGIN
	DECLARE TOTAL INT DEFAULT 0;
    SET TOTAL = 10;
    SELECT TOTAL;
END$$
DELIMITER ;

CALL SP();

-- ASSING VALUE IN VARIABLE USING SELECT --
DELIMITER $$
CREATE PROCEDURE SP()
BEGIN
	DECLARE TOTAL INT DEFAULT 0;
	SELECT COUNT(EMP_ID) FROM EMPLOYEE
    INTO TOTAL;
    SELECT TOTAL;
END$$
DELIMITER ;

-- PARAMETER PROCEDURE -- 
-- IN PARAMETER --
DELIMITER $$
CREATE PROCEDURE FORIN(IN STR VARCHAR(10))
BEGIN
  SELECT STR;
END$$
DELIMITER ;
-- CALLING IN PROCEDURE --
CALL FORIN('BISMILLAH');

-- OUT PARAMETER  --
DROP PROCEDURE FOROUT;

DELIMITER $$
CREATE PROCEDURE FOROUT(OUT TOTAL INT)
BEGIN
	SELECT COUNT(EMP_ID) FROM EMPLOYEE
    INTO TOTAL;
END$$
DELIMITER ;
-- CALLING OUT PARAMETER --
CALL FOROUT(@TOTAL);
SELECT @TOTAL;

--  INOUT PARAMETER --

DELIMITER $$
CREATE PROCEDURE FORINOUT(INOUT COUNTER INT , IN INC INT)
BEGIN
  SET COUNTER = COUNTER * INC;
END$$
DELIMITER ;
-- CALLING INOUT --
SET @COUNTER = 10;
CALL FORINOUT(@COUNTER,3);
SELECT @COUNTER;

-- sample -- 
DELIMITER $$
CREATE PROCEDURE SAMP(OUT TEN INT)
BEGIN
  SET TEN = 10;
END$$
DELIMITER ;
CALL SAMP(@TEN);
SELECT @TEN;
-- IF STATEMENT -- 
DELIMITER $$
CREATE PROCEDURE FORIFELSEIFELSE(IN ID INT)
BEGIN 
	IF ID%2=0 THEN 
		SELECT 'THEY ARE EVEN EMPLOYEES' AS OUTPUT;
	ELSE 
		SELECT 'THEY ARE ODD EMPLOYEES' AS OUTPUT;
	END IF;
END$$
DELIMITER ;
CALL FORIFELSEIFELSE(2);

-- SWITCH CASE IN PROCEDURE --
DELIMITER $$
CREATE PROCEDURE FORCASE(IN ID INT )
BEGIN
	CASE 
		WHEN ID%2=0 THEN
			SELECT 'THEY ARE EVEN EMPLOYEES' AS OUTPUT;
		WHEN ID%2<>0 THEN
			SELECT 'THEY ARE ODD EMPLYEES' AS OUTPUT;
	END CASE;
END$$
DELIMITER ;
CALL  FORCASE(2);

-- LOOPS IN SQL --
DELIMITER $$
CREATE PROCEDURE FORLOOPS()
BEGIN 
	DECLARE I INT DEFAULT 1;
    DECLARE STR VARCHAR(20) DEFAULT '';
    LABEL  : LOOP
		IF I>10 THEN 
			LEAVE LABEL;
		END IF;
        SET STR = concat(STR,I,' ');
        SET I = I+1;
    END LOOP;
SELECT STR;
END$$
DELIMITER ;
CALL FORLOOPS;
DROP PROCEDURE FORLOOPS;

-- WHILE LOOP --
DELIMITER $$
CREATE PROCEDURE FORWHILE()
BEGIN 
	DECLARE I INT DEFAULT 1;
    DECLARE STR VARCHAR(20) DEFAULT '';
	WHILE I<=10 DO
		SET STR = CONCAT(STR,I,' ');
        SET I = I+1;
	END WHILE;
SELECT STR;
END$$
DELIMITER ;
CALL FORWHILE;
-- REPEAT LOOP LIKE DO WHILE THE CONDITION ARE DIFFFERENT --
DELIMITER $$
CREATE PROCEDURE FORREPEAT()
BEGIN
	DECLARE I INT DEFAULT 1;
    DECLARE STR VARCHAR(20) DEFAULT '';
    REPEAT 
		SET STR = CONCAT(STR,I,' ');
        SET I = I+2;
        UNTIL I>10
	END REPEAT;
SELECT STR;
END$$
DELIMITER ;
CALL FORREPEAT;

-- functions in sql --
DELIMITER $$
CREATE  FUNCTION NAME_AND_SALARY(ID INT)
RETURNS VARCHAR(100)
DETERMINISTIC 
BEGIN
	DECLARE NS VARCHAR(100) DEFAULT '';  
    SELECT CONCAT(EMP_NAME,' AND HIS SALARY ',CAST(SALARY AS CHAR)) AS NAME_AND_SALARY INTO NS FROM EMPLOYEE
    WHERE  EMP_ID = ID;
    RETURN NS;
END$$
DELIMITER ;
DROP FUNCTION NAME_AND_SALARY;
SET @S = NAME_AND_SALARY(1);
SELECT 1 AS ID,@S AS DETAILS;

-- error handling in sql --
SELECT * FROM EMPLOYEE;
DROP PROCEDURE INSERTING;
DELIMITER $$
CREATE PROCEDURE INSERTING (IN ID INT , IN NAME VARCHAR(20) , IN SALARY INT)
BEGIN
	DECLARE EXIT HANDLER FOR 1062
    BEGIN
		SELECT COUNT(EMP_ID)+1 FROM EMPLOYEE
        INTO ID;
        INSERT INTO EMPLOYEE VALUES(ID,NAME,SALARY);
    END;
    -- USER DEFINED ERROR HANDLING --
    IF CHAR_LENGTH(NAME) <  3 THEN
    SIGNAL sqlstate '45000'
    SET MESSAGE_TEXT = ' BRO YOUR NAME IS TOO SHORT ';
    END IF; 
    -- RESIGNAL USED TO RETURN THE ERROR CODE TO THE CALLED PLACE -- 
	INSERT INTO EMPLOYEE VALUES(ID,NAME,SALARY);
    SELECT * FROM EMPLOYEE;
END$$
DELIMITER ;
-- CALLING --
CALL INSERTING(1,'RA',100000);
-- CURSOR - THIS IS USED TO TAKE THE DATA IN A ROW  --
CREATE TABLE BACKUPEMP
(EMP_ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
EMP_NAME VARCHAR(10) NOT NULL,
SALARY INT);
DELIMITER $$
CREATE PROCEDURE BCKUP()
BEGIN
	DECLARE ID,SALARY INT;
    DECLARE NAME VARCHAR(20);
	DECLARE CUR CURSOR FOR SELECT * FROM EMPLOYEE;
    OPEN CUR;
    LABEL : LOOP
		IF (SELECT COUNT(EMP_ID) FROM EMPLOYEE) = (SELECT COUNT(EMP_ID) FROM BACKUPEMP) THEN 
			LEAVE LABEL;
		END IF;
		FETCH CUR INTO ID,NAME,SALARY;
		INSERT INTO BACKUPEMP VALUES(ID,NAME,SALARY);
    END LOOP;
END$$
DELIMITER ;

-- CALLING --
CALL BCKUP();
SELECT * FROM BACKUPEMP;
SELECT * FROM EMPLOYEE;
select max(e) from (select emp_id*salary as e from employee) as earnings;